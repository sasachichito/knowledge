@startuml
hide empty fields 
hide empty methods
hide class circle

package "スクリプト" {
  class "PlantUMLスクリプト" as PlnatUMLスクリプト
  class "startuml〜enduml" as startumlからenduml
  class "1行" as スクリプト1行
}

package "スクリプト処理系" {
  class "BlockUml\n(startumlからendumlまでの1ブロック)" as BlockUml
  class "rawSource" as rawSource
  class "data" as data
  class "StringLocated" as StringLocated

  package tim {
    class "TimLoader" as TimLoader
    class "TContext" as TContext {
      resultList
      executeLines()
    }
    class "FunctionSet" as FunctionSet
    class "TFunction" as TFunction
    class "SimpleReturnFunction" as SimpleReturnFunction
    class "IsDark" as IsDark
  }
}

package "ダイアグラム処理系" {
  class "BlocLines" as BlocLines
  class "Command" as Command
  class "Step" as Step
  class "PSystemFactory" as PSystemFactory
  class "PSystemAbstractFactory" as PSystemAbstractFactory
  class "PSystemCommandFactory" as PSystemCommandFactory
  class "ClassDiagramFactory" as ClassDiagramFactory

  class "Diagram" as Diagram
  class "AbstractPSystem" as AbstractPSystem
  class "TitledDiagram" as TitledDiagram
  class "UmlDiagram" as UmlDiagram
  class "CucaDiagaram" as CucaDiagaram
  class "AbstractEntityDiagram" as AbstractEntityDiagram
  class "AbstractClassOrObjectDiagram" as AbstractClassOrObjectDiagram
  class "ClassDiagram" as ClassDiagram

  class "<<区分>>\nParserPass\n（実行フェーズ）" as ParserPass {
    ONE
    TWO
    THREE
  }
  class "Plasma \n(QuarkのCRUD管理)" as Plasma
  class "Quark \n(任意のデータのラッパー)" as Quark
  class "Entity \n(図中の各オブジェクトを表現)" as Entity
  class "Bodier \n(オブジェクトの内容)" as Bodier
  class "Link \n(オブジェクト間の関係性)" as Link {
    LinkArg
  }
}

package Graphviz処理系 {
  class "DotStringFactory" as DotStringFactory
  class "DotString" as DotString
  class "DotData" as DotData
  class "Bibliotekon" as Bibliotekon
  class "Cluster" as Cluster
  class "NodeMap" as NodeMap
  class "SvekNode" as SvekNode
  class "SvekEdge" as SvekEdge
  class "IEntityImage" as IEntityImage
  class "dot.exe \n(レイアウトの算出に利用)" as dot_exe
  class "SVGテキスト \n(レイアウト情報)" as SVGテキスト
}

package "描画処理系" {
  class "UDrawable \n(描画可能オブジェクト)" as UDrawable {
    drawU(UGraphic)
  }
  class "TextBlock" as TextBlock
  class "AbstractTextBlock" as AbstractTextBlock
  class "SvekResult" as SvekResult

  class "UGraphic" as UGraphic
  class "UShape \n(Graphics2Dにおける\nShape型に相当)" as UShape
  class "UDriver" as UDriver
  class "UParam" as UParam
  class "Uchage \n(Graphics2Dにおける\nsetFontやsetColorに相当)" as Uchage
  class "画像ファイル" as 画像ファイル

  package "Java標準ライブラリ" {
    class "Graphics2D" as Graphics2D
    class "BufferedImage" as BufferedImage
  }
}

PlnatUMLスクリプト -- "*" startumlからenduml
startumlからenduml -- "*" スクリプト1行

rawSource -- "1" startumlからenduml
rawSource -- "*" StringLocated

StringLocated -- "1" スクリプト1行

BlockUml -- "関数適用前\n1" rawSource : 持つ >
BlockUml -- "関数適用後\n1" data : 持つ >
BlockUml -- TimLoader : 使う >
BlockUml -- Diagram : 生成する >
BlockUml -- PSystemFactory : 使う >

TimLoader -- TContext : 持つ >
TimLoader -- "処理結果" data : 生成する >

TContext -- FunctionSet : 持つ >

FunctionSet -- "*" TFunction : 持つ >

SimpleReturnFunction ..|> TFunction

IsDark --|> SimpleReturnFunction

BlocLines -- "*" StringLocated

Step -- "1" Command
Step -- "コマンドの対象\n1" BlocLines

PSystemFactory -- "*" Command : 持つ >
PSystemFactory -- Diagram : 空で生成する >

ClassDiagramFactory --|> PSystemCommandFactory
PSystemCommandFactory --|> PSystemAbstractFactory
PSystemAbstractFactory ..|> PSystemFactory

Command -- StringLocated : 処理対象かチェック >
Command -- "1" ParserPass
Command -- Diagram : 設定する >

Diagram -- "必要フェーズ数\n1..*" ParserPass
Diagram -- "namespace\n1" Plasma : 持つ >
Diagram -- "*" Link : 持つ >
Diagram -- Step : 実行する >

ClassDiagram --|> AbstractClassOrObjectDiagram
AbstractClassOrObjectDiagram --|> AbstractEntityDiagram
AbstractEntityDiagram --|> CucaDiagaram
CucaDiagaram --|> UmlDiagram
UmlDiagram --|> TitledDiagram
TitledDiagram --|> AbstractPSystem
AbstractPSystem ..|> Diagram

Plasma -- "*" Quark : 持つ >
Quark -- "*" Entity : 持つ >

Link -- "cl1" Entity
Link -- "cl2" Entity
Link -- SvekEdge : 作成する >

Entity -- SvekNode : 作成する >
Entity -- Bodier : 持つ >

DotData -- "leafs\n*" Entity
DotData -- "*" Link

NodeMap -- "*" Entity
NodeMap -- "*" SvekNode

DotStringFactory -- DotString : 生成する >
DotStringFactory -- Bibliotekon : 持つ >
DotStringFactory -- DotData : 利用する >

Bibliotekon -- "*" Cluster : 持つ >
Bibliotekon -- "1" NodeMap : 持つ >
Bibliotekon -- "*" SvekEdge : 持つ >

SvekNode -- IEntityImage : 持つ >
SvekNode -- SVGテキスト : 位置情報を取得する >
SvekNode ..|> UDrawable

SvekEdge -- SVGテキスト : 位置情報を取得する >
SvekEdge ..|> UDrawable

Cluster -- SVGテキスト : 位置情報を取得する >
Cluster ..|> UDrawable

dot_exe -- "Input\n1" DotString
dot_exe -- "Output\n1" SVGテキスト

UDrawable -- UGraphic : を使って自身を描画する >
UDrawable -- UShape : を使って自身を表現する > 
UDrawable -- Uchage : を使ってスタイルを表現する >

UGraphic -- UDriver : 使う >

UParam -- "*" Uchage : まとめる >

UDriver -- UShape : 描画する >
UDriver -- UParam : 描画する >
UDriver -- Graphics2D : 利用する >

Graphics2D -- BufferedImage : 書き込む >

BufferedImage -- "1" 画像ファイル : 生成する >

SvekResult --|> AbstractTextBlock
AbstractTextBlock --|> TextBlock
TextBlock ..|> UDrawable
@enduml